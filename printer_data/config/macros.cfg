#  __  __                          
# |  \/  |                         
# | \  / | __ _  ___ _ __ ___  ___ 
# | |\/| |/ _` |/ __| '__/ _ \/ __|
# | |  | | (_| | (__| | | (_) \__ \
# |_|  |_|\__,_|\___|_|  \___/|___/
#
# Macros Configurations - Voron 2.4r2
# Version 1.0


#####################################################################
#   Print Start Macro
#####################################################################

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("50")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the SB leds.
  CASE_LIGHTS_ON                                                                    # Sets case lighing on
  STATUS_HOMING                                                                     # Sets SB-leds to homing-mode
  G28                                                                               # Full home (XYZ)
  G90                                                                               # Absolut position

  ##  Filament Sensor
  SFS_DISABLE                                                                       # Disable filament sensor
  
  ##  Bed Mesh Clear
  BED_MESH_CLEAR                                                                    # Clears old saved bed mesh

  # Checks if the bed temp is higher than 90c - if so then trigger a heat soak.
  {% if params.BED|int >= 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"                                       # Displays info
    STATUS_HEATING                                                                  # Sets SB-leds to heating-mode
    M106 S205                                                                       # Turns on part fan to 80%
    SET_PIN PIN=Nevermore_Filter VALUE=1                                            # Turns on the nevermore
    G1 X{x_wait} Y{y_wait} Z15 F9000                                                # Goes to center of the bed
    M190 S{target_bed}                                                              # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"                              # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"                                       # Displays info
    STATUS_HEATING                                                                  # Sets SB-leds to heating-mode
    SET_PIN PIN=Nevermore_Filter VALUE=1                                            # Turns on the nevermore
    G1 X{x_wait} Y{y_wait} Z15 F9000                                                # Goes to center of the bed
    M190 S{target_bed}                                                              # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                                            # Displays info
    G4 P300000                                                                      # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                                               # Displays info
  M109 S150                                                                         # Heats the nozzle to 150c

  ##  Z-Tilt Adjustment Level
  SET_DISPLAY_TEXT MSG="Z-Tilt Adjustment"                                          # Displays info
  STATUS_LEVELING                                                                   # Sets SB-leds to leveling-mode
  Z_TILT_ADJUST                                                                     # Levels the buildplate via z-tilt
  M400                                                                              # Wait command
  STATUS_CALIBRATING_Z                                                              # Sets SB-leds to calibrating z-mode
  G28 Z                                                                             # Homes Z again after z-tilt

  ##  Bed Mesh Create
  SET_DISPLAY_TEXT MSG="Bed mesh"                                                   # Displays info
  STATUS_MESHING                                                                    # Sets SB-leds to bed mesh-mode
  BED_MESH_CALIBRATE ADAPTIVE=1                                                     # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Bed: {target_bed}c  Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                                    # Sets SB-leds to heating-mode
  SMART_PARK                                                                        # Move for adaptive purge
  M107                                                                              # Turns off partcooling fan
  M190 S{target_bed}                                                                # Sets the target temp for the bed
  M109 S{target_extruder}                                                           # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"                                           # Displays info
  STATUS_PRINTING                                                                   # Sets SB-leds to printing-mode
  SMART_PURGE                                                                       # Runs macro for purging  
  G90                                                                               # Absolut position

  ##  Filament Sensor
  SFS_ENABLE                                                                        # Enables filament sensor
  

#####################################################################
#   Print End Macro
#####################################################################

[gcode_macro PRINT_END]

gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                                                                          # wait for buffer to clear
    G92 E0                                                                        # zero the extruder
    G1 E-15.0 F3600                                                               # retract filament
    
    M106 S0                                                                       # turn off fan
    M104 S0                                                                       # turn off hotend
    M140 S0                                                                       # turn off bed

    SET_PIN PIN=Nevermore_Filter VALUE=0                                          # turns off the nevermore

    G90                                                                           # absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000                                       # move nozzle to remove stringing
    G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y - 15} F3600                   # park nozzle at rear
    G0 Z{th.position.z + 30} F600                                                 # add z clearance 
        
    BED_MESH_CLEAR                                                                # Clears bed mesh

    SFS_DISABLE                                                                   # Disables filament sensor

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
    
    STATUS_OFF                                                                   # sets SB-leds to off-mode
    CASE_LIGHTS_OFF                                                              # sets case lighing off
    SET_VELOCITY_LIMIT VELOCITY=300 ACCEL=3000                                   # reset speeds to default
    M84                                                                          # turns steppers off
    

#####################################################################
#   Print Adaptive Purging Macro
#####################################################################

[gcode_macro SMART_PURGE]
description: A purge macro that adapts to be near your actual printed objects

variable_adaptive_enable: True      # Change to False if you'd like the purge to be in the same spot every print
variable_display_parameters: False  # Display macro paramters in the console.
variable_z_height: 0.8              # Z position of nozzle during purge, default is 0.8.
variable_tip_distance: 10           # Distance between tip of filament and nozzle before purge. Should be similar to PRINT_END final retract amount.
variable_purge_amount: 30           # Amount of filament to purge
variable_flow_rate: 12              # Flow rate of purge in mm3/s. Default is 12.
variable_x_default: 20              # X location to purge, overwritten if adaptive is True
variable_y_default: 20              # Y location to purge, overwritten if adaptive is True
variable_size: 10                   # Size of the logo
variable_purge_margin: 15           # Distance the purge will be in front of the print area, default is 10.

gcode:
  {% if display_parameters == True %}
     { action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }
     { action_respond_info("z_height        : %f" % (z_height))  }
     { action_respond_info("tip_distance    : %f" % (tip_distance))  }
     { action_respond_info("purge_amount    : %f" % (purge_amount))  }
     { action_respond_info("flow_rate       : %f" % (flow_rate))  }
     { action_respond_info("x_default       : %f" % (x_default))  }
     { action_respond_info("y_default       : %f" % (y_default))  }
     { action_respond_info("size            : %f" % (size))  }
     { action_respond_info("purge_margin    : %f" % (purge_margin))  }
  {% endif %}

  {% if adaptive_enable == True %}
     {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
     {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                           # Object x min
     {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                           # Object y min
     {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}                                   # Add margin to x min, compare to 0, and choose the larger
     {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}                                   # Add margin to y min, compare to 0, and choose the larger
  {% else %}
     {% set purge_x_origin = x_default | float %}
     {% set purge_y_origin = y_default | float %}
  {% endif %}
  
  {% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}
  {% set prepurge_speed = flow_rate / 2.405 %}
  {% set travel_speed = printer.toolhead.max_velocity %}
  { action_respond_info( "x: " + purge_x_origin|string + " y: " + purge_y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }

  SAVE_GCODE_STATE NAME=Prepurge_State                                                                   # Create gcode state

  G92 E0                                                                                                 # Reset extruder
  G0 F{travel_speed}                                                                                     # Set travel speed
  G90                                                                                                    # Absolute positioning
  G0 X{purge_x_origin} Y{purge_y_origin+size/2}                                                          # Move to purge position
  G0 Z{z_height}                                                                                         # Move to purge Z height
  M83                                                                                                    # Relative extrusion mode
  G1 E{tip_distance} F{prepurge_speed*60}                                                                # Move tip of filament to nozzle
  G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed*60}        # Purge first line of logo
  G1 E-.5 F2100                                                                                          # Retract
  G0 Z{z_height*2}                                                                                       # Z hop
  G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}                                                 # Move to second purge line origin
  G0 Z{z_height}                                                                                         # Move to purge Z height
  G1 E.5 F2100                                                                                           # Recover
  G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed*60}             # Purge second line of logo
  G1 E-.5 F2100                                                                                          # Retract
  G0 Z{z_height*2}                                                                                       # Z hop
  G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}                                                      # Move to third purge line origin
  G0 Z{z_height}                                                                                         # Move to purge Z height
  G1 E.5 F2100                                                                                           # Recover
  G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed*60}           # Purge third line of logo
  G1 E-.5 F2100                                                                                          # Retract
  G92 E0                                                                                                 # Reset extruder distance
  M82                                                                                                    # Absolute extrusion mode
  G0 Z{z_height*2}                                                                                       # Z hop

  RESTORE_GCODE_STATE NAME=Prepurge_State                                                                # Restore gcode state
    

#####################################################################
#  Heatsoak Macro
#####################################################################

[gcode_macro HEATSOAK]
description: Helper: Set up to heat soak printer. Usage: _HEATSOAK [TEMP=temp(110)] [MOVE=move(1)]
gcode:
  {% set temp = params.TEMP|default(100)|int %}
  {% set move = params.MOVE|default(1)|int %}
	
	CASE_LIGHTS_ON
    STATUS_HEATING
	SET_DISPLAY_TEXT MSG="Warming up"
	M140 S{temp}                                              # Heat the bed
	{% if temp >= 100 %}                                      # It's ABS or other high-temp plastic, closed case
		M104 S150                                             # Set hotend to no-ooze temp
		M106 S205                                             # Turn on part fan to 80% 
        SET_PIN PIN=Nevermore_Filter VALUE=1                  # Turn on Nevermore fans to circulate & accelerate chamber soak
	{% else %}
		M106 S0                                               # Turn off part fan. Open case, no need
        SET_PIN PIN=Nevermore_Filter VALUE=0                  # Make sure Nevermore is off
	{% endif %}
	{% if move == 1 %}
		STATUS_HOMING                                         # Sets SB-leds to homing-mode
        G28                                                   # Homing
        M400                                                  # Wait command
		PARK_BED                                              # Park toolhead in safe location (center volume)
        M400                                                  # Wait command
        M84                                                   # turns all steppers off
		STATUS_HEATING                                        # Sets SB-leds to heating-mode
    {% endif %}


#####################################################################
#  Parking Macros 
#####################################################################

[gcode_macro PARK_FRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
    STATUS_HOMING
    G28
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    STATUS_BUSY
    G90
    G0 X150 Y20 F6000
    RESTORE_GCODE_STATE NAME=PARKFRONT
    STATUS_READY


[gcode_macro PARK_PURGE]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
    STATUS_HOMING
    G28
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKPURGE
    STATUS_BUSY
    G90
    G0 X150 Y20 F6000
    G0 Z80 F600
    RESTORE_GCODE_STATE NAME=PARKPURGE
    STATUS_READY
    

[gcode_macro PARK_BED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
    STATUS_HOMING
    G28
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    STATUS_BUSY    
    G90
    G0 X150 Y150 F6000
    G0 Z15 F600                              
    RESTORE_GCODE_STATE NAME=PARKBED
    STATUS_READY
    
   
[gcode_macro SMART_PARK]
description: Parks your printhead near the print area for pre-print hotend heating.

variable_adaptive_enable: True      # Change to False if you'd like the purge to be in the same spot every print
variable_z_height: 15               # Z position for Smart Park, default is 10.
variable_x_default: 20              # X location to purge, overwritten if adaptive is True
variable_y_default: 20              # Y location to purge, overwritten if adaptive is True
variable_size: 10                   # Size of the logo
variable_purge_margin: 15           # Distance the purge will be in front of the print area, default is 10.

gcode:
  {% if adaptive_enable == True %}
     {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
     {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                           # Object x min
     {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                           # Object y min
     {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}                                   # Add margin to x min, compare to 0, and choose the larger
     {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}                                   # Add margin to y min, compare to 0, and choose the larger
  {% else %}
     {% set purge_x_origin = x_default | float %}
     {% set purge_y_origin = y_default | float %}
  {% endif %}
  
     {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}                               # Set travel speed from config
     { action_respond_info( "x: " + purge_x_origin|string + " y: " + purge_y_origin|string ) }

  SAVE_GCODE_STATE NAME=Presmart_Park_State                                                              # Create gcode state

  G0 F{travel_speed}                                                                                     # Set travel speed
  G90                                                                                                    # Absolute positioning
  G0 X{purge_x_origin} Y{purge_y_origin+size/2}                                                          # Move to purge position
  G0 Z{z_height}                                                                                         # Move to purge Z height

  RESTORE_GCODE_STATE NAME=Presmart_Park_State                                                           # Restore gcode state


#####################################################################
# Load / Unload Filament
#####################################################################

[gcode_macro UNLOAD_FILAMENT]
description: Filament unloading
gcode:
  
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default (220) | float %}
  SAVE_GCODE_STATE NAME=unload_state
  {% if printer.extruder.temperature < 220 %}
  RESPOND MSG="Nozzle heating..."
  M109 S{EXTRUDER_TEMP}
  {% endif %}
  RESPOND MSG="Unloading filament..."
  M83                            # set extruder to relative
  G1 E-30.0 F300                 # retract slowly into heatbreak
  G1 E5.0 F900                   # break stringing
  G1 E-65.0 F900                 # retract all the way
  M82                            # set extruder to absolute
  G92 E0.0                       # reset extruder
  RESPOND MSG="Filament unloaded..."
  RESTORE_GCODE_STATE NAME=unload_state
  {% endif %}

[gcode_macro LOAD_FILAMENT]
description: Filament loading
gcode:
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default (220) | float %}  
  SAVE_GCODE_STATE NAME=load_state
  {% if printer.extruder.temperature < 220 %}
  RESPOND MSG="Nozzle heating..."
  M109 S{EXTRUDER_TEMP}
  {% endif %}
  RESPOND MSG="Loading filament..."
  M83                            # set extruder to relative
  G1 E60.0 F900                  # loading
  G1 E30.0 F300                  # prime nozzle with filament
  M82                            # set extruder to absolute
  G92 E0.0                       # reset extruder
  RESPOND MSG="Filament Loaded..."
  RESTORE_GCODE_STATE NAME=load_state
  {% endif %}


#####################################################################
# Filament Loading Preheat Prompt
#####################################################################

[gcode_macro LOAD_PROMPT]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Preheat Filament Load"
    RESPOND TYPE=command MSG="action:prompt_text Choose a material to preheat for:"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button PLA|LOAD_PLA|primary"
    RESPOND TYPE=command MSG="action:prompt_button ASA|LOAD_ASA|primary"
    RESPOND TYPE=command MSG="action:prompt_button ABS|LOAD_ABS|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button PETG|LOAD_PETG|primary"
    RESPOND TYPE=command MSG="action:prompt_button PC|LOAD_PC|primary"
    RESPOND TYPE=command MSG="action:prompt_button FLEX|LOAD_FLEX|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Cancel|CANCEL_PROMPT|secondary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro UNLOAD_PROMPT]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Preheat Filament Unload"
    RESPOND TYPE=command MSG="action:prompt_text Choose a material to preheat for:"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button PLA|LOAD_PLA|primary"
    RESPOND TYPE=command MSG="action:prompt_button ASA|LOAD_ASA|primary"
    RESPOND TYPE=command MSG="action:prompt_button ABS|LOAD_ABS|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button PETG|LOAD_PETG|primary"
    RESPOND TYPE=command MSG="action:prompt_button PC|LOAD_PC|primary"
    RESPOND TYPE=command MSG="action:prompt_button FLEX|LOAD_FLEX|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Cancel|CANCEL_PROMPT|secondary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_show"


#####################################################################
# Filament Material Types
#####################################################################

[gcode_macro LOAD_ABS]
gcode:
    M104 S240
    M140 S100
    RESPOND TYPE=command MSG=action:prompt_end

[gcode_macro LOAD_ASA]
gcode:
    M104 S240
    M140 S100
    RESPOND TYPE=command MSG=action:prompt_end

[gcode_macro LOAD_PLA]
gcode:
    M104 S200
    M140 S60
    RESPOND TYPE=command MSG=action:prompt_end

[gcode_macro LOAD_PETG]
gcode:
    M104 S220
    M140 S60
    RESPOND TYPE=command MSG=action:prompt_end

[gcode_macro LOAD_PC]
gcode:
    M104 S250
    M140 S100
    RESPOND TYPE=command MSG=action:prompt_end

[gcode_macro LOAD_FLEX]
gcode:
    M104 S200
    M140 S60
    RESPOND TYPE=command MSG=action:prompt_end

[gcode_macro CANCEL_PROMPT]
gcode:
    RESPOND TYPE=command MSG=action:prompt_end


#####################################################################
# Pause / Resume / Cancel Print
#####################################################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set z = params.Z|default(10)|int %}                                                                                # z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                                                           # set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}                                 # set hotend temp variable for reference in resume macro

        SFS_DISABLE                                                                                                       # disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                                                       # save current print position for resume
        BASE_PAUSE                                                                                                        # pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}                                    # check that zhop doesn't exceed z max
            G91                                                                                                           # relative positioning
            G1 Z{z} F900                                                                                                  # raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                                               # if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                                               # absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000                                # park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                                                   # save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                                                           # turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                                                    # set timeout to 12 hours
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set e = params.E|default(0)|int %}                                                                                 # hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SFS_ENABLE                                                                                                         # enable filament sensor
        
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                        # set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                                              # wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                                           # go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                                                                # relative positioning
        M83                                                                                                                # relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                                                      # prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                                                           # lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                                                                # restore position
        BASE_RESUME                                                                                                        # resume print
    {% endif %}


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                            # set timeout back to configured value
    CLEAR_PAUSE
    PRINT_END
    BASE_CANCEL_PRINT


#####################################################################
# Nozzle / Bed PID Calibration
#####################################################################

[gcode_macro PID_BED]
description: Bed PID
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  RESPOND MSG="Bed PID calibration in progress..."
  G28
  G90
  G1 Z50 F1500
  M400
  M106
  PID_CALIBRATE HEATER=heater_bed TARGET={params.TEMP|default(100)}
  M107
  RESPOND MSG="PID calibration complete! Remember to save the configuration!"
  {% endif %}


[gcode_macro PID_HOTEND]
description: Hotend PID
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  RESPOND MSG="Hotend PID calibration in progress..."
  G28
  G90
  G1 Z50 F1500
  M400
  M106
  PID_CALIBRATE HEATER=extruder TARGET={params.TEMP|default(250)}
  M107
  RESPOND MSG="PID calibration complete! Remember to save the configuration!"
  {% endif %}
  
  
[gcode_macro _PID_KS_START]
description: PID for KlipperScreen
gcode:
  RESPOND MSG="PID calibration in progress..."
  G28
  G90
  G1 Z50 F1500
  M400
  M106


[gcode_macro _PID_KS_END]
description: PID for KlipperScreen
gcode:
  M107
  RESPOND MSG="PID calibration complete! Remember to save the configuration!"


#####################################################################
# Verifications and Measurements with ADXL
#####################################################################

[gcode_macro ADXL_QUERY]
description: ADXL QUERY
gcode:
  ACCELEROMETER_QUERY CHIP={params.CHIP|default(beacon)}


[gcode_macro ADXL_NOISE]
description: Measure Accelerometer Noise
gcode:
  MEASURE_AXES_NOISE CHIP={params.CHIP|default(beacon)}


[gcode_macro ADXL_CALIBRATION]
description: Input shapper xy auto calibration
gcode:
  SHAPER_CALIBRATE CHIP={params.CHIP|default(beacon)}

  
[gcode_macro ADXL_AXE_X]
description: Measure X axis resonances
gcode:
  TEST_RESONANCES AXIS=X CHIP={params.CHIP|default(beacon)}


[gcode_macro ADXL_AXE_Y]
description: Measure Y axis resonances
gcode:
  TEST_RESONANCES AXIS=Y CHIP={params.CHIP|default(beacon)}


#####################################################################
# Save Configuration
#####################################################################

[gcode_macro SAVE_CONFIGURATION]
description: Save Configuration
gcode:
  SAVE_CONFIG


#####################################################################
# Sensorless Homing Macros
#####################################################################
 
[gcode_macro _HOME_PRE_AXIS]
gcode:
  {% set HOME_CURRENT = 0.5 %}
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
  STATUS_HOMING

[gcode_macro _HOME_POST_AXIS]
gcode:
  {% set axis = params.AXIS %}
  {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
  {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
  SAVE_GCODE_STATE NAME=home_post_axis
  G91
  G0 {axis}-20 F2400
  RESTORE_GCODE_STATE NAME=home_post_axis
  M400
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

  
#####################################################################
# Misc Macros
#####################################################################

[idle_timeout]
timeout = 7200
gcode = 
	{% if printer.pause_resume.is_paused %}
	M118 Bypassed Timeout
	M117 Bypassed Timeout
	{% else %}
	M118 Timeout Reached
	M117 Timeout Reached
	TURN_OFF_HEATERS
	M84
	{% endif %}

    
[gcode_macro BEACON_CALIBRATION]
gcode:
    BEACON_AUTO_CALIBRATE
    M400
    G0 Z10 F1500
    

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set TARGET_TEMP = printer.heater_bed.target %}
    M140 S0
    _BED_MESH_CALIBRATE {rawparams}
    M140 S{TARGET_TEMP}
    

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}    # Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}     # Wait for hotend temp (within 1 degree)
    {% endif %}


[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}
    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}    # Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}   # Wait for bed temp (within 1 degree)
    {% endif %}


[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    STATUS_HOMING
    G28
    STATUS_LEVELING
    Z_TILT_ADJUST
    STATUS_HOMING
    G28 Z
    PARK_BED
    RESTORE_GCODE_STATE NAME=STATE_G32
    STATUS_READY

    
[gcode_macro M600]
description: Filament Change
gcode:
    PAUSE


[gcode_macro M601]
description: Pause Print
gcode:
    PAUSE   